import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;

public class RabbitConnectionCheck {

    public static void main(String[] args) {
        String host = "your_rabbitmq_host";
        int port = 5671; // Default SSL port for RabbitMQ
        String username = "your_username";
        String password = "your_password";

        try {
            ConnectionFactory factory = new ConnectionFactory();
            factory.setHost(host);
            factory.setPort(port);
            factory.setUsername(username);
            factory.setPassword(password);
            factory.useSslProtocol(); // Enable SSL

            Connection connection = factory.newConnection();
            System.out.println("Successfully connected to RabbitMQ host: " + host);
            connection.close();
        } catch (Exception e) {
            System.out.println("Failed to connect to RabbitMQ host: " + host);
            e.printStackTrace();
        }
    }
}


#!/bin/bash

# Check if tess.txt exists
if [[ ! -f tess.txt ]]; then
    echo "File tess.txt not found!"
    exit 1
fi

# Set IFS to newline to handle directory paths with spaces
IFS=$'\n'

# Read each line from tess.txt and perform git pull
while read -r repo; do
    if [[ -d "$repo" ]]; then
        echo "Pulling updates for $repo..."
        cd "$repo" || { echo "Failed to cd into $repo"; exit 1; }
        git pull || { echo "Failed to pull from $repo"; exit 1; }
        cd - > /dev/null # Return to previous directory
    else
        echo "Directory $repo not found, skipping..."
    fi
done < tess.txt

echo "All repositories pulled successfully."








#!/bin/bash

# Define namespaces to check
namespaces=("t-dev-nm" "t-test-nm" "t-prod-nm")

# Output file to store affected pods
output_file="affected_pods.txt"

# Clear the output file if it exists
> "$output_file"

# Iterate over each namespace
for namespace in "${namespaces[@]}"; do
    echo "Checking namespace: $namespace"
    
    # Get pods in the current namespace and check for missing limits in the first container
    affected_pods=$(kubectl get pods -n "$namespace" -o json | jq -r '.items[] | .metadata.name as $pod | .spec.containers[0] | select(.resources.limits == null) | $pod')
    
    # If there are affected pods, write them to the file
    if [ -n "$affected_pods" ]; then
        echo "Namespace: $namespace" >> "$output_file"
        echo "$affected_pods" >> "$output_file"
        echo "---" >> "$output_file"
    fi
done

echo "Script finished. Affected pods are listed in $output_file"


